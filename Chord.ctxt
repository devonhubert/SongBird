#BlueJ class context
comment0.params=
comment0.target=Chord()
comment0.text=\n\ The\ default\ constructor,\ which\ sets\ the\ Chord's\ noteNumber\ to\ 0\ (int)\n
comment1.params=scaleDegree\ qualityName
comment1.target=Chord(int,\ java.lang.String)
comment1.text=\n\ Creates\ an\ abstract\ Chord\ based\ on\ its\ scale\ degree,\ and\ quality\n\ @param\ scaleDegree\ The\ the\ degree\ of\ the\ Chord,\ based\ on\ its\ Key\ (int)\n\ @param\ qualityName\ The\ quality\ of\ the\ Chord\ (minor,\ Major,\ etc.)\ (String)\n
comment10.params=
comment10.target=java.util.ArrayList\ getNotes()
comment10.text=\n\ @return\ an\ ArrayList\ of\ all\ Notes\ in\ the\ Chord\n
comment11.params=
comment11.target=int\ getScaleDegree()
comment11.text=\n\ @return\ the\ Chord's\ scale\ degree\ (int)\n
comment12.params=chordType
comment12.target=Interval[]\ findIntervalsFromChordType(java.lang.String)
comment12.text=\n\ Finds\ a\ Chord's\ intervals\ based\ on\ what\ type\ of\ chord\ it\ is\n\ @param\ chordType\ The\ type\ of\ chord\ ("Major",\ "minor",\ etc.)\ (String)\n\ @return\ an\ array\ of\ Intervals\n
comment13.params=intervals\ rootName
comment13.target=java.lang.String[]\ printNotes(Interval[],\ java.lang.String)
comment13.text=\n\ Creates\ an\ array\ of\ note\ names\ for\ a\ Chord,\ based\ on\ its\ intervals\ and\ rootName\n\ @param\ intervals\ An\ Interval\ array\ of\ intervals\ in\ the\ Chord\ \n\ @param\ rootName\ The\ name\ of\ the\ Chord's\ root\n\ @return\ a\ String\ array\ of\ the\ names\ of\ all\ the\ Notes\ in\ the\ Chord\n
comment14.params=
comment14.target=void\ printNoteValues()
comment14.text=\n\ Prints\ the\ value\ of\ every\ Note\ in\ the\ Chord\n
comment15.params=
comment15.target=void\ printIntervals()
comment15.text=\n\ Prints\ every\ Interval\ that\ exists\ between\ every\ pair\ of\ two\ adjacent\ Notes\ \n\ in\ the\ Chord\n
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\n\ @return\ a\ String\ representation\ of\ the\ given\ Chord\n
comment2.params=chordNotes
comment2.target=Chord(java.util.ArrayList)
comment2.text=\n\ Creates\ a\ Chord\ from\ an\ ArrayList\ of\ given\ Notes\ (Should\ analyze()\ to\ set\ other\ values)\n\ @param\ chordNotes\ An\ ArrayList\ of\ all\ the\ Notes\ in\ a\ Chord\n
comment3.params=startingNote\ chordIntervals
comment3.target=Chord(Note,\ java.util.ArrayList)
comment3.text=\n\ Creates\ a\ Chord\ from\ a\ starting\ Note,\ and\ an\ ArrayList\ of\ Intervals\ \n\ (Should\ analyze()\ to\ set\ other\ values)\n\ @param\ startingNote\ The\ lowest\ Note\ in\ the\ Chord,\ or\ the\ Note\ at\ which\ intervals\n\ start\ being\ added\n\ @param\ chordIntervals\ An\ ArrayList\ of\ all\ the\ Intervals\ to\ be\ added\ to\ the\ \n\ startingNote\ to\ create\ the\ Chord\n
comment4.params=letterName
comment4.target=void\ setLetterName(java.lang.String)
comment4.text=\n\ Sets\ the\ Chord's\ letter\ name\ \n\ @param\ letterName\ The\ Chord's\ letter\ name,\ which\ is\ an\ indication\ of\ \n\ the\ Chord's\ root\ (String)\n
comment5.params=
comment5.target=java.lang.String\ getLetterName()
comment5.text=\n\ @return\ the\ Chord's\ letter\ name,\ an\ indication\ of\ the\ Chord's\ root\ (String)\n
comment6.params=qualityName
comment6.target=void\ setQualityName(java.lang.String)
comment6.text=\n\ Sets\ the\ Chord's\ quality\ (Major,\ minor,\ etc.)\ \n\ @param\ qualityName\ The\ name\ of\ the\ Chord's\ quality\ (String)\n
comment7.params=
comment7.target=java.lang.String\ getQualityName()
comment7.text=\n\ @return\ the\ name\ of\ the\ Chord's\ quality\ (Major,\ minor,\ etc.)\ (String)\n
comment8.params=degree
comment8.target=void\ setScaleDegree(int)
comment8.text=\n\ Sets\ the\ Chord's\ scale\ degree\n\ @param\ degree\ The\ scale\ degree\ of\ the\ Chord\ (int)\n
comment9.params=notes
comment9.target=void\ setNotes(java.util.ArrayList)
comment9.text=\n\ Sets\ the\ Chord's\ notes\n\ @param\ notes\ All\ notes\ in\ the\ Chord\ (ArrayList<Note>)\n
numComments=17
