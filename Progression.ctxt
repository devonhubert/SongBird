#BlueJ class context
comment0.params=
comment0.target=Progression()
comment0.text=\n\ The\ default\ constructor,\ which\ creates\ a\ simple\ pop\ progression\ in\ the\ Key\ of\ C\ Major\n
comment1.params=genre
comment1.target=Progression(Genre)
comment1.text=\n\ The\ constructor\ that\ creates\ chord\ progressions\ for\ each\ section\ \n\ of\ the\ song,\ based\ on\ the\ given\ Genre\n\ @param\ genre\ The\ song's\ genre\ (Rock,\ Pop,\ Classical,\ etc.);\n
comment10.params=chordList1\ chordList2
comment10.target=int\ getChordDistance(java.util.ArrayList,\ java.util.ArrayList)
comment10.text=\n\ Calculates\ the\ total\ distance\ between\ all\ corresponding\ Chord\ Notes\n\ \n\ @param\ chordList1\ An\ ArrayList\ of\ Notes\ that\ represents\ the\ first\ Chord\n\ @param\ chordList2\ An\ ArrayList\ of\ Notes\ that\ represents\ the\ second\ Chord\n\ \n\ @return\ the\ total\ distance\ value\ (int)\n
comment11.params=notes
comment11.target=java.util.ArrayList\ makeFour(java.util.ArrayList)
comment11.text=\n\ Converts\ a\ Chord\ with\ 3\ or\ 5\ notes\ into\ a\ Chord\ with\ 4\ notes\ for\ voice\ leading\n\ \n\ @param\ notes\ An\ ArrayList\ of\ Notes\ that\ represents\ the\ current\ Chord\n\ @return\ the\ adjusted\ ArrayList\ of\ Notes\n
comment12.params=key
comment12.target=void\ changeKey(Key)
comment12.text=\n\ Changes\ the\ key\ of\ the\ current\ progression,\ and\ adjusts\ its\ Chords\n\ accordingly\n\ @param\ key\ The\ destination\ Key\ \n
comment13.params=key\ chordNumber
comment13.target=java.util.ArrayList\ makeProgression(Key,\ int)
comment13.text=\n\ Combines\ methods\ from\ Progression\ to\ form\ a\ set\ of\ Chords\n\ @param\ key\ The\ song's\ key\ \n\ @param\ chordNumber\ The\ number\ of\ Chords\ in\ the\ specified\ section\ of\ the\ song\n\ @return\ an\ analyzed\ set\ of\ Chords\n
comment14.params=functionList\ chordNumber
comment14.target=java.util.ArrayList\ findFunctions(java.util.ArrayList,\ int)
comment14.text=\n\ Creates\ a\ functionList\ of\ Chord\ functions,\ based\ on\ common\ song\ patterns\ and\ music\ theory\ \n\ ("T"\ for\ "Tonic",\ "SD"\ for\ "Subdominant",\ "D"\ for\ "Dominant",\ "D7"\ for\ Dominant\ that\ \n\ always\ resolves\ up\ a\ perfect\ fourth,\ and\ "R"\ for\ the\ result\ of\ Dominant\ resolution\ up\ \n\ a\ fourth)\n\ \n\ @param\ functionList\ The\ empty\ ArrayList\ to\ be\ filled\ with\ function\ Strings\n\ @param\ chordNumber\ The\ number\ of\ Chords\ desired\ in\ the\ functionList\n\ @return\ the\ functionList,\ an\ ArrayList\ of\ Strings\ representing\ Chord\ functions\n
comment15.params=
comment15.target=int\ randomKey()
comment15.text=\n\ Creates\ a\ "random"\ key,\ based\ on\ the\ complexity\ of\ the\ given\ genre\n\ @return\ an\ integer\ which\ represents\ a\ Key,\ and\ can\ be\ translated\ into\ one\n
comment16.params=functionList
comment16.target=java.util.ArrayList\ findChords(java.util.ArrayList)
comment16.text=\n\ Finds\ abstract\ Chord\ types\ based\ on\ the\ given\ list\ of\ functions\ ("T"\ for\ "Tonic",\ etc.)\n\ @param\ functionList\ A\ list\ of\ Chord\ functions\ to\ be\ interpreted\n\ @return\ an\ ArrayList\ of\ abstract\ Chords\ that\ fit\ the\ given\ functions\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\n\ @return\ a\ String\ representation\ of\ the\ Progressions\ of\ a\ song,\ arranged\ in\ the\ order\n\ specified\ by\ the\ song's\ Genre\n
comment2.params=
comment2.target=java.util.ArrayList\ getVerseChords()
comment2.text=\n\ @return\ an\ ArrayList\ of\ all\ the\ Chords\ in\ the\ verse\ of\ the\ \n\ current\ Progression\n
comment3.params=
comment3.target=java.util.ArrayList\ getPrechorusChords()
comment3.text=\n\ @return\ an\ ArrayList\ of\ all\ the\ Chords\ in\ the\ pre-chorus\ of\ the\ \n\ current\ Progression\n
comment4.params=
comment4.target=java.util.ArrayList\ getChorusChords()
comment4.text=\n\ @return\ an\ ArrayList\ of\ all\ the\ Chords\ in\ the\ chorus\ of\ the\ \n\ current\ Progression\n
comment5.params=
comment5.target=java.util.ArrayList\ getBridgeChords()
comment5.text=\n\ @return\ an\ ArrayList\ of\ all\ the\ Chords\ in\ the\ bridge\ of\ the\ \n\ current\ Progression\n
comment6.params=
comment6.target=Genre\ getGenre()
comment6.text=\n\ @return\ the\ Genre\ of\ the\ current\ Progression\n
comment7.params=
comment7.target=Key\ getKey()
comment8.params=chordList
comment8.target=java.util.ArrayList\ fillNotes(java.util.ArrayList)
comment8.text=\n\ Finds\ and\ sets\ the\ Notes\ in\ every\ Chord\ in\ a\ Progression\ based\ on\ the\ \n\ Chord\ type\ and\ root\ name\ of\ each\ Chord\n\ @param\ chordList\ The\ ArrayList\ of\ Chords\ to\ be\ filled\ with\ Notes\n\ @return\ the\ filled\ ArrayList\ of\ Chords\n
comment9.params=chordList
comment9.target=java.util.ArrayList\ voiceLead(java.util.ArrayList)
comment9.text=\n\ Rearranges\ the\ notes\ of\ each\ Chord\ in\ a\ progression\ so\ that\ the\n\ movement\ between\ Notes\ occurs\ with\ maximum\ efficiency\ (the\ least\ \n\ movement)\n\ @param\ chordList\ The\ original\ ArrayList\ of\ Chords\ that\ make\ up\ the\ Progression\n\ @return\ the\ updated\ ArrayList\ of\ Chords\n
numComments=18
